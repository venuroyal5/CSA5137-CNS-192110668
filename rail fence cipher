#include <stdio.h>
#include <string.h>
#define MAX_LENGTH 100
// Function to encrypt the message using Rail Fence cipher
void encrypt(char *plaintext, int rails, char *ciphertext) {
 int len = strlen(plaintext);
 char rail[rails][len];
 // Initialize rail matrix with spaces
 for (int i = 0; i < rails; i++) {
 for (int j = 0; j < len; j++) {
 rail[i][j] = ' ';
 }
 }
 int row = 0, col = 0;
 int dir_down = 0;
 // Fill the rail matrix
 for (int i = 0; i < len; i++) {
 if (row == 0 || row == rails - 1)
 dir_down = !dir_down;
 rail[row][col] = plaintext[i];
 col++;
 dir_down ? row++ : row--;
 }
 // Extract the encrypted text from the rail matrix
 int index = 0;
 for (int i = 0; i < rails; i++) {
 for (int j = 0; j < len; j++) {
 if (rail[i][j] != ' ')
 ciphertext[index++] = rail[i][j];
 }
 }
 ciphertext[len] = '\0';
}
// Function to decrypt the message using Rail Fence cipher
void decrypt(char *ciphertext, int rails, char *decryptedText) {
 int len = strlen(ciphertext);
 char rail[rails][len];
 // Initialize rail matrix with spaces
 for (int i = 0; i < rails; i++) {
 for (int j = 0; j < len; j++) {
 rail[i][j] = ' ';
 }
 }
 int row = 0, col = 0;
 int dir_down;
 // Fill the rail matrix to simulate encryption process
 for (int i = 0; i < len; i++) {
 if (row == 0)
 dir_down = 1;
 if (row == rails - 1)
 dir_down = 0;
 rail[row][col++] = '*';
 dir_down ? row++ : row--;
 }
 // Fill the rail matrix with ciphertext characters
 int index = 0;
 for (int i = 0; i < rails; i++) {
 for (int j = 0; j < len; j++) {
 if (rail[i][j] == '*' && index < len)
 rail[i][j] = ciphertext[index++];
 }
 }
 // Read the rail matrix to get the decrypted text
 row = 0, col = 0;
 dir_down = 0;
 for (int i = 0; i < len; i++) {
 if (row == 0)
 dir_down = 1;
 if (row == rails - 1)
 dir_down = 0;
 if (rail[row][col] != '*')
 decryptedText[i] = rail[row][col++];
 else
 col++;
 dir_down ? row++ : row--;
 }
 decryptedText[len] = '\0';
}
int main() {
 char plaintext[MAX_LENGTH], ciphertext[MAX_LENGTH],
decryptedText[MAX_LENGTH];
 int rails;
 // Input plaintext and number of rails
 printf("Enter the plaintext: ");
 fgets(plaintext, sizeof(plaintext), stdin);
 plaintext[strcspn(plaintext, "\n")] = '\0';
 printf("Enter the number of rails: ");
 scanf("%d", &rails);
 // Encryption
 encrypt(plaintext, rails, ciphertext);
 printf("Encrypted text: %s\n", ciphertext);
 // Decryption
 decrypt(ciphertext, rails, decryptedText);
 printf("Decrypted text: %s\n", decryptedText);
 return 0;
}
